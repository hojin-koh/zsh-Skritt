#!/usr/bin/env zsh
# Parse command-line options in shell script
# This script is a derived work of "parse_options.sh" from Kaldi project
# ( http://kaldi.sourceforge.net/ )
# located at (root)/egs/wsj/s5/utils/
# which is released with Apache 2.0 license
# Copyright 2012  Johns Hopkins University (Author: Daniel Povey);
#                 Arnab Ghoshal, Karel Vesely

# Parse command-line options.
# Option format is: --option-name=arg or option-name=arg
# and shell variable "option_name" gets set to value "arg"
# The exceptions are --help|-h, which takes no arguments, but prints the
# help message, and --config, which reads a config file as options

__::errexit() {
  printHelpMessage
  printf '%.0s-' {1..75} >&2
  printf '\n' >&2
  echo "Error: $1" >&2
  echo "Command line was:" >&2
  echo "${skrittCommandLineOriginal-}" >&2
  exit 5
}

# $1 should be in the form of --name=value or name=value
__::parse_one_option() {
  local __key="${1%%=*}"
  __key="${__key#--}"
  __key="${__key//-/_}"
  __key="${__key//./___}"
  local __value="${1#*=}"
  __value="${__value//"'"/"'\"'\"'"}" # Escape single quote

  if [[ "${(Pt)__key-}" == "" ]]; then
    __::errexit "Undeclared option: $1"
  fi

  if [[ "${(Pt)__key-}" == "array" ]]; then
    if [[ -z "$__value" ]]; then
      eval "$__key+=( '' )"
    else
      eval "$__key+=( '$__value' )"
    fi
  elif [[ "${(Pt)__key-}" == "scalar" ]]; then
    eval "$__key='$__value'"
  else
    __::errexit "Invalid option type: $__key is neither scalar nor array"
  fi
}

__programargs=()
typeset -g skrittCommandLineOriginal="$ZSH_ARGZERO $@"
while true; do
  if [[ "$#" == 0 ]]; then break; fi  # break if there are no arguments anymore
  if [[ "$1" == "--" ]]; then # anything followed by -- is not parsed
    shift 1
    __programargs+=("$@")
    break
  fi

  case "$1" in
  # If the enclosing script is called with --help option, print the help
  # message and exit.  Scripts should put help messages in $tris_help_message
  --help|-h)
    printHelpMessage
    unset -f TRAPEXIT
    exit 0 ;;
  --*=*)
    __::parse_one_option "$1"
    shift 1
    ;;
  *=*) # No -- prefix: this also works
    __::parse_one_option "$1"
    shift 1
    ;;
  --*)
    __::parse_one_option "$1=true"
    shift 1
    ;;
  *)
    __programargs+=("$1")
    shift 1
    ;;
  esac
done
if [[ "${#__programargs[@]}" -gt 0 ]]; then
  set -- "${__programargs[@]}"
fi

unset __programargs
unset -f __::parse_one_option
unset -f __::errexit
